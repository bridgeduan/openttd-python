#!/bin/env python
# event implementation for openttd-python bot script

from log import LOG
import ottd_constants as const
from ottd_config import config
import StringIO
import traceback

class Event:
    """
    Base event class
    @cvar dispatchTo: list of dispatchers
    @type dispatchTo: list
    """
    dispatchTo = ["sendToGame", "sendToIRC", "sendToLog", "sendToCmdProc"]
    def dispatch(self):
        """
        Dispatch an event to all dispatchers
        
        Calls every dispatcher in dispatchTo, if it's a string, it uses getattr, else, it tries to execute
        """
        for to in self.dispatchTo:
            if not type(to) == str:
                to(self)
            else:
                try:
                    function = getattr(self, to)
                except AttributeError:
                    LOG.error("Unknown dispatcher in %s: %s" % (self.__class__, to))
                else:
                    function()
    def sendToCmdProc(self):
        """
        The commandparser dispatcher
        @precondition: self.parentclient must not be None
        @rtype:  Boolean
        @return: False is the preconditions are not True
        """
        if self.parentclient is None:
            return False
        self.parentclient.processCommand(self)
        return True
class IngameChat(Event):
    """
    this event is generated by ingame chat
    @cvar   dispatchTo: list of dispatchers
    @type   dispatchTo: list
    @ivar         type: the type of this event (ingame, team, private)
    @type         type: string
    @ivar parentclient: the parent client
    @type parentclient: SpectatorClass instance
    @ivar       parent: the event that generated this event
    @type       parent: Event instance
    @ivar     playerid: the id of the client that generated this event
    @type     playerid: number
    @ivar playercompany: the company of the client that generated this event
    @type playercompany: number
    @ivar   playername: the name of the client that generated this event
    @type   playername: string
    @ivar          msg: the message
    @type          msg: string
    """
    dispatchTo = ["sendToIRC", "sendToLog", "sendToCmdProc"]
    def __init__(self, msg, clientid=-1, parent=None, parentclient=None, type=None):
        """
        Constructor for the IngameChat event
        @param          msg: the message
        @type           msg: string
        @param     clientid: the id of the client that generated this event
        @type      clientid: number
        @param       parent: the event that generated this event
        @type        parent: Event instance
        @param parentclient: the parent client
        @type  parentclient: SpectatorClass instnace
        @param         type: the type of this event (ingame, team, private)
        @type          type: string
        """
        self.type = type
        self.parentclient = parentclient
        self.parent = parent
        if not parent is None:
            # get stuff from parents
            try:
                if type is None and not self.parent.type is None:
                    self.type = self.parent.type
                if parentclient is None and not self.parent.parentclient is None:
                    self.parentclient = self.parent.parentclient
                if clientid == -1 and not self.parent.playerid == -1:
                    clientid = self.parent.playerid
                elif clientid == -1 and not self.parentclient is None:
                    clientid = self.parentclient.client_id
            except AttributeError:
                pass
        self.playerid = clientid
        self.msg = msg
        if clientid in self.parentclient.playerlist:
            self.playername = self.parentclient.playerlist[clientid]['name']
            self.playercompany = self.parentclient.playerlist[clientid]['company']
        self.dispatch()
    
    def __repr__(self):
        """
        @todo: remove this
        """
        return "IngameChat<msg='%s', playerid=%d, playername='%s', self_sent=%d, broadcast=%d, distribution=%s>" % (
                    self.msg,
                    self.playerid,
                    self.playername,
                    self.self_sent,
                    self.broadcast,
                    self.distribution
                )
    def isCommand(self):
        """
        Check if the message could be a command
        @rtype:  boolean
        @return: True if the msg could be a command(starts with the command prefix)
        """
        return self.msg.startswith(config.get("main", "commandprefix"))
    def respond(self, msg):
        """
        Respond to the event
        
        Initializes IngameChatResponse
        @param msg: message to respond with
        @type  msg: string
        """
        if not self.type is None:
            if self.type == "public" or self.type == "team":
                IngameChatResponse("%s: %s" % (self.playername, msg), self.playerid, self)
            elif self.type == "private":
                IngameChatResponse(msg, self.playerid, self)
    def sendToGame(self):
        """
        Dispatcher to game
        @precondition: self.type is not None
        @rtype: boolean
        @returns: True if the precondition is True
        """
        if not self.type is None:
            if self.type == "public":
                self.parentclient.sendChat(self.msg)
            elif self.type == "team":
                self.parentclient.sendChat(self.msg, desttype=const.DESTTYPE_TEAM, dest=self.playercompany, chattype=const.NETWORK_ACTION_CHAT_COMPANY)
            elif self.type == "private":
                self.parentclient.sendChat(self.msg, desttype=const.DESTTYPE_CLIENT, dest=self.playerid, chattype=const.NETWORK_ACTION_CHAT_CLIENT)
            return True
        return False
    def sendToLog(self):
        """
        Dispatcher to log
        @precondition: self.type is not None
        @rtype: boolean
        @returns: True if the precondition is True
        """
        if not self.type is None:
            if self.type == "public":
                LOG.info("Ingame chat: <%s> %s" % (self.playername,self.msg))
            elif self.type == "team":
                LOG.info("Ingame company chat: [%d]<%s> %s" % (self.playercompany, self.playername,self.msg))
            elif self.type == "private":
                LOG.info("Ingame private chat: <%s> %s" % (self.playername,self.msg))
            return True
        return False
    def sendToIRC(self):
        """
        Dispatcher to IRC
        @precondition: self.type is not None
        @precondition: self.parentclient.irc is not None
        @precondition: the event message is not a command
        """
        if self.parentclient.irc is None or self.isCommand() or self.type is None:
            return False
        if self.type == "public":
            self.parentclient.irc.say("<%s> %s" % (self.playername, self.msg), 0)   
        elif self.type == "team":
            self.parentclient.irc.say("[company: %d]<%s> %s" % (self.playercompany,self.playername, self.msg), 0)
        elif self.type == "private":
            if self.playername in self.parentclient.irc.bridges_ingame_irc:
                self.parentclient.irc.say_nick(self.parentclient.irc.bridges_ingame_irc[self.playername], "[bridge] <%s> %s" % (self.playername, self.msg), 0)
            else:
                self.parentclient.irc.say("[private]<%s> %s" % (self.playername, self.msg), 0)
        return True
    def isByOp(self):
        """
        Check if the command is from someone previledged, on IRC, this is an Op, ingame, this is the servr
        @rtype: boolean
        @returns: if the event is generated by the server
        """
        return self.playerid == 1
    def isFromIRC(self):
        """
        Check if the event comes from IRC
        @rtype: boolean
        @returns: False
        """
        return False


class IngameChatResponse(IngameChat):
    """
    The response to an IngameChatEvent
    @cvar dispatchTo: list of dispatchers
    @type dispatchTo: list
    """
    dispatchTo = ["sendToGame", "sendToLog"]
    def respond(self, msg):
        """
        Respond to the response, also known as do nothing
        @param msg: the message to respond with
        @type  msg: string
        """
        pass
    def sendToLog(self):
        """
        The event dispatcher to LOG
        @precondition: self.type is not None
        @rtype: boolean
        @returns: True if the preconditions are true
        """
        if self.type is None:
            return False
        if self.type == "public":
            LOG.info("Ingame public chat response: %s" % (self.msg))
        elif self.type == "team":
            LOG.info("Ingame team chat response: <To: %s> %s" % (self.playercompany, self.msg))
        elif self.type == "private":
            LOG.info("Ingame private chat response: <To: %s> %s" % (self.playername, self.msg))
        return True

        
class IRCChat(Event):
    """
        event generated by IRC chat
    """
    dispatchTo = ["sendToLog", "sendToCmdProc"]
    type = None
    playerid = -1
    def __init__(self, msg, nickname, parentclient=None, parent=None, parentircevent=None):
        if parentclient is None and not parent is None:
            self.parentclient = parent.parentclient
        else:
            self.parentclient = parentclient
        if parentircevent is None and not parent is None:
            self.parentircevent = parent.parentircevent
        else:
            self.parentircevent = parentircevent
        self.playername = nickname
        self.msg = msg
        self.parent = parent
        self.dispatch()
    def isCommand(self):
        return self.msg.startswith(config.get("main", "commandprefix"))
    def sendToGame(self):
        if self.isCommand(): # don't forward commands to game
            return False
        self.parentclient.sendChat("<%s> %s" % (self.playername, self.msg))
        return True
    def sendToIRC(self):
        if self.parentclient.irc is None or self.isCommand():
            return False
        self.parentclient.irc.say(self.msg, 0)
    def isFromIRC(self):
        return True
class IRCPublicChat(IRCChat):
    """
        event is generated by IRC channel chat
    """
    dispatchTo = ["sendToGame", "sendToLog", "sendToCmdProc"]
    type = None
    playerid = -1
    def __init__(self, msg, nickname, parentclient=None, parent=None, parentircevent=None):
        if parentclient is None and not parent is None:
            self.parentclient = parent.parentclient
        else:
            self.parentclient = parentclient
        if parentircevent is None and not parent is None:
            self.parentircevent = parent.parentircevent
        else:
            self.parentircevent = parentircevent
        self.playername = nickname
        self.msg = msg
        self.parent = parent
        self.dispatch()
    def isCommand(self):
        return self.msg.startswith(config.get("main", "commandprefix"))
    def sendToGame(self):
        if self.isCommand(): # don't forward commands to game
            return False
        self.parentclient.sendChat("<%s> %s" % (self.playername, self.msg))
        return True
    def sendToIRC(self):
        if self.parentclient.irc is None or self.isCommand():
            return False
        self.parentclient.irc.say(self.msg, 0)
    def sendToLog(self):
        LOG.info("IRC chat: <%s> %s" % (self.playername,self.msg))
        return True
    def respond(self, msg):
        IRCPublicChatResponse("%s: %s" % (self.playername, msg),self.playername, parent=self)
    def isByOp(self):
        if self.parentclient is None or self.parentircevent is None:
            return False
        return self.parentclient.irc.bot.channels[self.parentircevent.target()].is_oper(self.playername)

class IRCPublicChatResponse(IRCPublicChat):
    dispatchTo = ["sendToIRC", "sendToLog"]
    def sendToLog(self):
        LOG.info("IRC chat response: %s" % self.msg)

class IRCPrivateChat(IRCChat):
    """
        event is generated by IRC private chat
    """
    dispatchTo = ["sendToLog", "sendToGame", "sendToCmdProc"]
    def sendToLog(self):
        LOG.info("IRC private chat: <%s> %s" % (self.playername,self.msg))
        return True
    def sendToGame(self):
        if self.playername in self.parentclient.irc.bridges_irc_ingame and not self.isCommand():
            playername = self.parentclient.irc.bridges_irc_ingame[self.playername]
            for client in self.parentclient.playerlist:
                if self.parentclient.playerlist[client]['name'] == playername:
                    self.parentclient.sendChat("[bridge] <%s> %s" % (self.playername, self.msg), desttype=const.DESTTYPE_CLIENT, dest=self.parentclient.playerlist[client]['id'], chattype=const.NETWORK_ACTION_CHAT_CLIENT)
                    break;
    def respond(self, msg):
        IRCPrivateChatResponse(msg,self.playername, parent=self)
    def isByOp(self):
        return False

class IRCPrivateChatResponse(IRCPrivateChat):
    dispatchTo = ["sendToIRC", "sendToLog"]
    def sendToLog(self):
        LOG.info("IRC private chat response to %s: %s" % (self.playername, self.msg))
    def sendToIRC(self):
        if self.parentclient.irc is None:
            return False
        self.parentclient.irc.say_nick(self.playername, self.msg, 0)

class IRCPrivateNoticeChat(IRCPrivateChat):
    """
        event is generated by IRC notice chat
    """
    def respond(self, msg):
        IRCPrivateNoticeChatResponse(msg,self.playername, parent=self)
class IRCPrivateNoticeChatResponse(IRCPrivateChatResponse):
    def sendToIRC(self):
        if self.parentclient.irc is None:
            return False
        self.parentclient.irc.notice(self.playername, self.msg)
        
class Broadcast(IngameChat):
    """
    This event is generated by the bot itself when it needs to broadcast something
    @cvar dispatchTo: list of dispatchers
    @type dispatchTo: list
    """
    dispatchTo = ["sendToGame", "sendToIRC", "sendToLog"]
    def sendToGame(self):
        """
        Dispatcher to game
        @rtype: boolean
        @returns: True
        """
        self.parentclient.sendChat(self.msg)
        return True
    def sendToIRC(self):
        """
        Dispatcher to IRC
        @precondition: self.parentclient.irc is not None
        @rtype: boolean
        @returns: True if the precondition is True
        """
        if self.parentclient.irc is None:
            return False
        self.parentclient.irc.say(self.msg, 0)
        return True
    def sendToLog(self):
        """
        Dispatcher to LOG
        @rtype: boolean
        @returns: True
        """
        LOG.info("EVENT: %s" % (self.msg))
        return True

        
class IngameToIRC(Broadcast):
    """
        this event is generated by join/quit messages
    """
    dispatchTo = ["sendToIRC", "sendToLog"]
class IRCToIngame(Broadcast):
    """
        this event is generated by internal messages from irc"
    """
    dispatchTo = ["sendToGame", "sendToLog"]
class IRCPublicActionChat(IRCPublicChat):
    """
        this event is generated by irc /me messages
    """
    dispatchTo = ["sendToGame", "sendToLog"]
    def sendToGame(self):
        self.parentclient.sendChat("* %s %s" % (self.playername, self.msg))
    def sendToLog(self):
        LOG.info("IRC action: * %s %s" % (self.playername, self.msg))
class IRCPrivateActionChat(IRCPrivateChat):
    """
        this event is generated by irc private /me messages
    """
    dispatchTo = ["sendToLog"]
    def sendToLog(self):
        LOG.info("IRC private action: * %s %s" % (self.playername, self.msg))
class InternalCommand(Event):
    dispatchTo = ["sendToCmdProc"]
    def __init__(self, msg, parentclient=None):
        self.msg = msg
        self.parentclient = parentclient
        self.dispatch()
    def respond(self, msg):
        # this should not happen.
        Broadcast(msg, parentclient=self.parentclient, parent=self)
    def isByOp(self):
        return True
    def isCommand(self):
        return True
    def isFromIRC(self):
        return False
