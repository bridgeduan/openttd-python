#!/bin/env python
# event implementation for openttd-python bot script

from ottd_lib import LOG
import ottd_constants as const
from ottd_config import config

class Event:
    pass
class IngameChat(Event):
    """
        this event is generated by ingame chat
    """
    execute = True
    distribution = {'ingame': False, 'irc': True, 'log': True}
    def __init__(self, msg, clientid=-1, parent=None, parentclient=None, type=None):
        if parentclient is None and not parent is None:
            self.parentclient = parent.parentclient
        else:
            self.parentclient = parentclient
        self.parent = parent
        if type is None and not self.parent is None and not self.parent.type is None:
            self.type = self.parent.type
        else:
            self.type = type
        if clientid == -1:
            clientid = self.parentclient.client_id
        self.playerid = clientid
        self.msg = msg
        if clientid in self.parentclient.playerlist:
            self.playername = self.parentclient.playerlist[clientid]['name']
            self.playercompany = self.parentclient.playerlist[clientid]['company']
        self.dispatch()
    
    def __repr__(self):
        return "IngameChat<msg='%s', playerid=%d, playername='%s', self_sent=%d, broadcast=%d, distribution=%s>" % (
                    self.msg,
                    self.playerid,
                    self.playername,
                    self.self_sent,
                    self.broadcast,
                    self.distribution
                )
    def isCommand(self):
        return self.msg.startswith(config.get("main", "commandprefix"))
    def dispatch(self):
        self.sendToGame()
        self.sendToLog()
        self.sendToIRC()
        if self.execute:
            self.parentclient.processCommand(self)
    def respond(self, msg):
        if not self.type is None:
            if self.type == "public" or self.type == "team":
                IngameChatResponse("%s: %s" % (self.playername, msg), self.playerid, self)
            elif self.type == "private":
                IngameChatResponse(msg, self.playerid, self)
    def sendToGame(self):
        if not self.distribution['ingame']:
            return False
        if not self.type is None:
            if self.type == "public":
                self.parentclient.sendChat(self.msg)
            elif self.type == "team":
                self.parentclient.sendChat(self.msg, desttype=const.DESTTYPE_TEAM, dest=self.playercompany, chattype=const.NETWORK_ACTION_CHAT_COMPANY)
            elif self.type == "private":
                self.parentclient.sendChat(self.msg, desttype=const.DESTTYPE_CLIENT, dest=self.playerid, chattype=const.NETWORK_ACTION_CHAT_CLIENT)
            return True
    def sendToLog(self):
        if not self.distribution['log']:
            return False
        if not self.type is None:
            if self.type == "public":
                LOG.info("Ingame chat: <%s> %s" % (self.playername,self.msg))
            elif self.type == "team":
                LOG.info("Ingame company chat: [%d]<%s> %s" % (self.playercompany, self.playername,self.msg))
            elif self.type == "private":
                LOG.info("Ingame private chat: <%s> %s" % (self.playername,self.msg))
            return True
    def sendToIRC(self):
        if not self.distribution['irc'] or self.parentclient.irc is None or self.isCommand():
            return False
        if not self.type is None:
            if self.type == "public":
                self.parentclient.irc.say("<%s> %s" % (self.playername, self.msg), 0)   
            elif self.type == "team":
                self.parentclient.irc.say("[company: %d]<%s> %s" % (self.playercompany,self.playername, self.msg), 0)
            elif self.type == "private":
                self.parentclient.irc.say("[private]<%s> %s" % (self.playername, self.msg), 0)

class IngameChatResponse(IngameChat):
    distribution = {'ingame': True, 'irc': False, 'log': True}
    execute = False
    def respond(self, msg):
        pass
    def sendToLog(self):
        if not self.distribution['log'] or self.type is None:
            return False
        if self.type == "public":
            LOG.info("Ingame public chat response: %s" % (self.msg))
        elif self.type == "team":
            LOG.info("Ingame team chat response: <To: %s> %s" % (self.playercompany, self.msg))
        elif self.type == "private":
            LOG.info("Ingame private chat response: <To: %s> %s" % (self.playername, self.msg))

class IRCPublicChat(Event):
    """
        event is generated by IRC channel chat
    """
    distribution = {'ingame': True, 'irc': False, 'log': True}
    execute = True
    def __init__(self, msg, nickname, parentclient=None, parent=None):
        if parentclient is None and not parent is None:
            self.parentclient = parent.parentclient
        else:
            self.parentclient = parentclient
        self.playername = nickname
        self.msg = msg
        self.parent = parent
        self.dispatch()
    def isCommand(self):
        return self.msg.startswith(config.get("main", "commandprefix"))
    def sendToGame(self):
        if not self.distribution['ingame'] or self.isCommand(): # don't forward commands to game
            return False
        self.parentclient.sendChat("<%s> %s" % (self.playername, self.msg))
        return True
    def sendToIRC(self):
        if not self.distribution['irc'] or self.parentclient.irc is None or self.isCommand():
            return False
        self.parentclient.irc.say(self.msg, 0)
    def sendToLog(self):
        if not self.distribution['log']:
            return False
        LOG.info("IRC chat: <%s> %s" % (self.playername,self.msg))
        return True
    def respond(self, msg):
        IRCPublicChatResponse("%s: %s" % (self.playername, msg),self.playername, parent=self)
    def dispatch(self):
        self.sendToGame()
        self.sendToLog()
        self.sendToIRC()
        if self.execute:
            self.parentclient.processCommand(self)

class IRCPublicChatResponse(IRCPublicChat):
    distribution = {'ingame': False, 'irc': True, 'log': True}
    execute = False
    def sendToLog(self):
        if not self.distribution['log']:
            return False
        LOG.info("IRC chat response: %s" % self.msg)
        
class Broadcast(IngameChat):
    """
        this event is generated by the bot itself when it needs to broadcast something
    """
    distribution = {'ingame': True, 'irc': True, 'log': True}
    execute = False
    def sendToGame(self):
        if not self.distribution['ingame']:
            return False
        self.parentclient.sendChat(self.msg)
        return True
    def sendToIRC(self):
        if not self.distribution['irc'] or self.parentclient.irc is None:
            return False
        self.parentclient.irc.say(self.msg, 0)
    def sendToLog(self):
        if not self.distribution['log']:
            return False
        LOG.info("EVENT: %s" % (self.msg))
        return True

        
class IngameToIRCEvent(Broadcast):
    """
        this event is generated by join/quit messages
    """
    distribution = {'ingame': False, 'irc': True, 'log': True}
class IRCToIngameEvent(Broadcast):
    """
        this event is generated by internal messages from irc"
    """
    distribution = {'ingame': True, 'irc': False, 'log': True}
class IRCPublicActionChatEvent(IRCPublicChat):
    """
        this event is generated by irc /me messages
    """
    distribution = {'ingame': True, 'irc': False, 'log': True}
    execute = False
    def sendToGame(self):
        if not self.distribution['ingame']:
            return False
        self.parentclient.sendChat("* %s %s" % (self.playername, self.msg))
    def sendToLog(self):
        if not self.distribution['log']:
            return False
        LOG.info("IRC action: * %s %s" % (self.playername, self.msg))
        
class InternalCommandEvent(Event):
    def __init__(self, msg, parentclient=None):
        self.msg = msg
        self.parentclient = parentclient
        self.dispatch()
    def dispatch(self):
        self.parentclient.processCommand(self)
    def respond(self, msg):
        # this should not happen.
        Broadcast(msg, parentclient=self.parentclient, parent=self)
